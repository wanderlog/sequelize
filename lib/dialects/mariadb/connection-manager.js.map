{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst semver = require('semver');\nconst { ConnectionManager } = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mariadb;\nconst momentTz = require('moment-timezone');\n\nconst debug = logger.debugContext('connection:mariadb');\nconst parserStore = require('../parserStore')('mariadb');\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @private\n */\nexport class MariaDbConnectionManager extends ConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mariadb');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z')\n      : tzOffset;\n\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: MariaDbConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false,\n      ...config.dialectOptions,\n    };\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(\n          connectionConfig.initSql,\n        )) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      return connection;\n    } catch (error) {\n      switch (error.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(error);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(error);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new SequelizeErrors.HostNotReachableError(error);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new SequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n\n      return;\n    }\n\n    return await connection.end();\n  }\n\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
