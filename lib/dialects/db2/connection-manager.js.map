{
  "version": 3,
  "sources": ["../../../src/dialects/db2/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst { ConnectionManager } = require('../abstract/connection-manager');\nconst sequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').db2;\n\nconst debug = logger.debugContext('connection:db2');\nconst parserStore = require('../parserStore')('db2');\n\n/**\n * DB2 Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle DB2 specific connections\n * Use https://github.com/ibmdb/node-ibm_db to connect with DB2 server\n *\n * @private\n */\nexport class Db2ConnectionManager extends ConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('ibm_db');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with DB2 database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      database: config.database,\n      hostname: config.host,\n      port: config.port,\n      uid: config.username,\n      pwd: config.password,\n    };\n\n    if (config.ssl) {\n      connectionConfig.security = config.ssl;\n    }\n\n    if (config.sslcertificate) {\n      connectionConfig.SSLServerCertificate = config.sslcertificate;\n    }\n\n    if (config.dialectOptions) {\n      for (const key of Object.keys(config.dialectOptions)) {\n        connectionConfig[key] = config.dialectOptions[key];\n      }\n    }\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Database();\n        connection.lib = this.lib;\n        connection.open(connectionConfig, error => {\n          if (error) {\n            if (error.message && error.message.includes('SQL30081N')) {\n              return reject(new sequelizeErrors.ConnectionRefusedError(error));\n            }\n\n            return reject(new sequelizeErrors.ConnectionError(error));\n          }\n\n          return resolve(connection);\n        });\n      });\n    } catch (error) {\n      throw new sequelizeErrors.ConnectionError(error);\n    }\n  }\n\n  disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.connected) {\n      connection.close(error => {\n        if (error) {\n          debug(error);\n        } else {\n          debug('connection closed');\n        }\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  validate(connection) {\n    return connection && connection.connected;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  _disconnect(connection) {\n    return this.dialect.connectionManager.disconnect(connection);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,EAAE,sBAAsB,QAAQ,gCAAgC;AACtE,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,WAAW,QAAQ,oBAAoB;AAC/C,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAE9C,MAAM,QAAQ,OAAO,aAAa,gBAAgB;AAClD,MAAM,cAAc,QAAQ,gBAAgB,EAAE,KAAK;AAW5C,MAAM,6BAA6B,kBAAkB;AAAA,EAC1D,YAAY,SAAS,WAAW;AAC9B,cAAU,OAAO,OAAO,UAAU,OAAO,QAAQ;AACjD,UAAM,SAAS,SAAS;AACxB,SAAK,MAAM,KAAK,mBAAmB,QAAQ;AAC3C,SAAK,kBAAkB,SAAS;AAAA,EAClC;AAAA,SAEO,UAAU,OAAO,MAAM;AAC5B,QAAI,YAAY,IAAI,MAAM,IAAI,GAAG;AAC/B,aAAO,YAAY,IAAI,MAAM,IAAI,EAAE,OAAO,KAAK,UAAU,SAAS,IAAI;AAAA,IACxE;AAEA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,mBAAmB,UAAU;AAC3B,gBAAY,QAAQ,QAAQ;AAAA,EAC9B;AAAA,EAEA,mBAAmB;AACjB,gBAAY,MAAM;AAAA,EACpB;AAAA,QAWM,QAAQ,QAAQ;AACpB,UAAM,mBAAmB;AAAA,MACvB,UAAU,OAAO;AAAA,MACjB,UAAU,OAAO;AAAA,MACjB,MAAM,OAAO;AAAA,MACb,KAAK,OAAO;AAAA,MACZ,KAAK,OAAO;AAAA,IACd;AAEA,QAAI,OAAO,KAAK;AACd,uBAAiB,WAAW,OAAO;AAAA,IACrC;AAEA,QAAI,OAAO,gBAAgB;AACzB,uBAAiB,uBAAuB,OAAO;AAAA,IACjD;AAEA,QAAI,OAAO,gBAAgB;AACzB,iBAAW,OAAO,OAAO,KAAK,OAAO,cAAc,GAAG;AACpD,yBAAiB,OAAO,OAAO,eAAe;AAAA,MAChD;AAAA,IACF;AAEA,QAAI;AACF,aAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,cAAM,aAAa,IAAI,KAAK,IAAI,SAAS;AACzC,mBAAW,MAAM,KAAK;AACtB,mBAAW,KAAK,kBAAkB,WAAS;AACzC,cAAI,OAAO;AACT,gBAAI,MAAM,WAAW,MAAM,QAAQ,SAAS,WAAW,GAAG;AACxD,qBAAO,OAAO,IAAI,gBAAgB,uBAAuB,KAAK,CAAC;AAAA,YACjE;AAEA,mBAAO,OAAO,IAAI,gBAAgB,gBAAgB,KAAK,CAAC;AAAA,UAC1D;AAEA,iBAAO,QAAQ,UAAU;AAAA,QAC3B,CAAC;AAAA,MACH,CAAC;AAAA,IACH,SAAS,OAAP;AACA,YAAM,IAAI,gBAAgB,gBAAgB,KAAK;AAAA,IACjD;AAAA,EACF;AAAA,EAEA,WAAW,YAAY;AAErB,QAAI,WAAW,WAAW;AACxB,iBAAW,MAAM,WAAS;AACxB,YAAI,OAAO;AACT,gBAAM,KAAK;AAAA,QACb,OAAO;AACL,gBAAM,mBAAmB;AAAA,QAC3B;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EAEA,SAAS,YAAY;AACnB,WAAO,cAAc,WAAW;AAAA,EAClC;AAAA,EASA,YAAY,YAAY;AACtB,WAAO,KAAK,QAAQ,kBAAkB,WAAW,UAAU;AAAA,EAC7D;AACF;",
  "names": []
}
