{
  "version": 3,
  "sources": ["../../../src/dialects/db2/data-types.js"],
  "sourcesContent": ["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined,\n    'https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/'\n    + 'com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html');\n\n  /**\n   * Removes unsupported Db2 options, i.e., LENGTH, UNSIGNED and ZEROFILL,\n   * for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length > 0 || dataType._unsigned || dataType._zerofill) {\n      warn(`Db2 does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see Data types and table columns: https://www.ibm.com/support/knowledgecenter/en/SSEPGG_11.1.0/com.ibm.db2.luw.admin.dbobj.doc/doc/c0055357.html\n   */\n\n  BaseTypes.DATE.types.db2 = ['TIMESTAMP'];\n  BaseTypes.STRING.types.db2 = ['VARCHAR'];\n  BaseTypes.CHAR.types.db2 = ['CHAR'];\n  BaseTypes.TEXT.types.db2 = ['VARCHAR', 'CLOB'];\n  BaseTypes.TINYINT.types.db2 = ['SMALLINT'];\n  BaseTypes.SMALLINT.types.db2 = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.db2 = ['INTEGER'];\n  BaseTypes.INTEGER.types.db2 = ['INTEGER'];\n  BaseTypes.BIGINT.types.db2 = ['BIGINT'];\n  BaseTypes.FLOAT.types.db2 = ['DOUBLE', 'REAL', 'FLOAT'];\n  BaseTypes.TIME.types.db2 = ['TIME'];\n  BaseTypes.DATEONLY.types.db2 = ['DATE'];\n  BaseTypes.BOOLEAN.types.db2 = ['BOOLEAN', 'BOOL', 'SMALLINT', 'BIT'];\n  BaseTypes.BLOB.types.db2 = ['BLOB'];\n  BaseTypes.DECIMAL.types.db2 = ['DECIMAL'];\n  BaseTypes.UUID.types.db2 = ['CHAR () FOR BIT DATA'];\n  BaseTypes.ENUM.types.db2 = ['VARCHAR'];\n  BaseTypes.REAL.types.db2 = ['REAL'];\n  BaseTypes.DOUBLE.types.db2 = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.db2 = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 255 bytes\n          return 'BLOB(255)';\n        }\n\n        if (this._length.toLowerCase() === 'medium') { // medium = 16M\n          return 'BLOB(16M)';\n        }\n\n        if (this._length.toLowerCase() === 'long') { // long = 2GB\n          return 'BLOB(2G)';\n        }\n\n        return `BLOB(${this._length})`;\n      }\n\n      return 'BLOB'; // 1MB\n    }\n\n    escape(blob) {\n      return `BLOB('${blob.toString().replace(/'/g, '\\'\\'')}')`;\n    }\n\n    _stringify(value) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB('${value.toString().replace(/'/g, '\\'\\'')}')`;\n      }\n\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n\n      const hex = value.toString('hex');\n\n      return this._hexify(hex);\n    }\n\n    _hexify(hex) {\n      return `x'${hex}'`;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        if (this._length <= 4000) {\n          return `VARCHAR(${this._length})`;\n        }\n\n        return `CLOB(${this._length})`;\n      }\n\n      if (this._length < 255) {\n        return `CHAR(${this._length}) FOR BIT DATA`;\n      }\n\n      if (this._length <= 4000) {\n        return `VARCHAR(${this._length}) FOR BIT DATA`;\n      }\n\n      return `BLOB(${this._length})`;\n    }\n\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._hexify(value.toString('hex'));\n      }\n\n      return options.escape(value);\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      let len = 0;\n      if (this._length) {\n        switch (this._length.toLowerCase()) {\n          case 'tiny':\n            len = 256; // tiny = 2^8\n            break;\n          case 'medium':\n            len = 8192; // medium = 2^13 = 8k\n            break;\n          case 'long':\n            len = 65_536; // long = 64k\n            break;\n        }\n\n        if (isNaN(this._length)) {\n          this._length = 32_672;\n        }\n\n        if (len > 0) {\n          this._length = len;\n        }\n      } else {\n        this._length = 32_672;\n      }\n\n      if (this._length > 32_672) {\n        len = `CLOB(${this._length})`;\n      } else {\n        len = `VARCHAR(${this._length})`;\n      }\n\n      warn(`Db2 does not support TEXT datatype. ${len} will be used instead.`);\n\n      return len;\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          value = value === 'true' ? true : value === 'false' ? false : value;\n          value = value === '\\u0001' ? true : value === '\\u0000' ? false : value;\n\n        } else if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          value = value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n\n      return value;\n    }\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) FOR BIT DATA';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'CURRENT TIME';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      if (this._length < 0) {\n        this._length = 0;\n      }\n\n      if (this._length > 6) {\n        this._length = 6;\n      }\n\n      return `TIMESTAMP${this._length ? `(${this._length})` : ''}`;\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length > 0) {\n        let msec = '.';\n        for (let i = 0; i < this._length && i < 6; i++) {\n          msec += 'S';\n        }\n\n        return date.format(`YYYY-MM-DD HH:mm:ss${msec}`);\n      }\n\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    static parse(value) {\n      if (typeof value !== 'string') {\n        value = value.string();\n      }\n\n      if (value === null) {\n        return value;\n      }\n\n      value = new Date(momentTz.utc(value));\n\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return momentTz(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // Db2 does not support any options for real\n      if (this._length || this.options.length > 0 || this._unsigned || this._zerofill) {\n        warn('Db2 does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // Db2 does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('Db2 does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n\n      if (this._unsigned) {\n        warn('Db2 does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n\n      if (this._zerofill) {\n        warn('Db2 does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // db2 does not support any parameters for double\n      if (this._length || this.options.length > 0\n          || this._unsigned || this._zerofill) {\n        warn('db2 does not support DOUBLE with options. '\n             + 'Plain DOUBLE will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n\n    toSql() {\n      return 'DOUBLE';\n    }\n  }\n\n  DOUBLE.prototype.key = DOUBLE.key = 'DOUBLE';\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    DOUBLE,\n    'DOUBLE PRECISION': DOUBLE,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT,\n  };\n};\n"],
  "mappings": "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",
  "names": []
}
