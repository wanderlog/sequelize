{
  "version": 3,
  "sources": ["../../../src/dialects/db2/query.js"],
  "sourcesContent": ["'use strict';\n\nconst { AbstractQuery } = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\n\nconst debug = logger.debugContext('sql:db2');\n\nexport class Db2Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    const param = { ParamType: 'INPUT', Data: value };\n    if (Buffer.isBuffer(value)) {\n      param.DataType = 'BLOB';\n\n      return param;\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || 'default'}): ${this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT '))\n            && !SQL.includes(' FROM ', 8)) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, -1);\n          }\n\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? JSON.stringify(parameters) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? JSON.stringify(parameters) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n\n                result.closeSync();\n              }\n\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (const metadatum of metadata) {\n                  coltypes[metadatum.SQL_DESC_NAME]\n                      = metadatum.SQL_DESC_TYPE_NAME;\n                }\n\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n\n                if (outparams && outparams.length > 0) {\n                  data.unshift(outparams);\n                }\n\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n\n        return '?';\n      }\n\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') !== -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') !== -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') !== -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') !== -1) {\n      if (err.message.search('Reason code \"2\"') !== -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') !== -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') !== -1\n      && _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.slice(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n\n    if (err && err.length === 0) {\n      err = null;\n    }\n\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace('(\\'', '').replace('\\')', '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y',\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y',\n          comment: _result.Comment,\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA,\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err.message = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (Boolean(conn) && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0].INDNAME;\n      }\n\n      if (this.model && Boolean(uniqueIndexName)) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where\n          && this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues\n          && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique',\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/)\n      || err.message.match(/SQL0530N/)\n      || err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        cause: err,\n        stack: errStack,\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        cause: err,\n        stack: errStack,\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('select c.column_name as \\'name\\', c.data_type as \\'type\\', c.is_nullable as \\'isnull\\'');\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    for (const item of data) {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type,\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\n          return ` ${x}`;\n        }).split(' '), column => {\n          let columnName = column.trim();\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: !column.includes('-') ? 'ASC' : 'DESC',\n              collate: undefined,\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    }\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute)\n          && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) {\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      }\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
