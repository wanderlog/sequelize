{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\n\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nexport class ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10_000,\n      acquire: 60_000,\n      evict: 1000,\n      validate: this._validate.bind(this),\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n\n      return require(moduleName);\n\n    } catch (error) {\n      if (error.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses,\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig => _.defaults(readConfig, _.omit(this.config, 'replication')));\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType = 'write', useMaster = false) => {\n        if (queryType !== 'read' && queryType !== 'write') {\n          throw new Error(`Expected queryType to be either read or write. Received ${queryType}`);\n        }\n\n        if (queryType === 'read' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow(),\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain(),\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses,\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses,\n      }),\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n\n            _options.logging.__testLoggingFn = true;\n\n            // connection might have set databaseVersion value at initialization,\n            // avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n\n            return await this._disconnect(connection);\n          } catch (error) {\n            this.versionPromise = null;\n            throw error;\n          }\n        })();\n      }\n\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) {\n        throw new errors.ConnectionAcquireTimeoutError(error);\n      }\n\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   *\n   * @returns {Promise}\n   */\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
