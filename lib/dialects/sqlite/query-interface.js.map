{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryTypes } = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nexport class SqliteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName,\n      });\n    }\n\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    // Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    // http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.slice(0, Math.max(0, index))}, ${constraintSnippet})${sql.slice(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database,\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName,\n        };\n      }\n\n      return data;\n    } catch (error) {\n      if (error.original && error.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw error;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
