{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/query.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst { AbstractQuery } = require('../abstract/query');\nconst parserStore = require('../parserStore')('ibmi');\nconst sequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:ibmi');\n\nexport class IBMiQuery extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParams = [];\n\n    const replacementFunc = (match, key, values_) => {\n\n      if (values_[key] !== undefined) {\n        bindParams.push(values_[key]);\n\n        return '?';\n      }\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParams];\n  }\n\n  async run(sql, parameters) {\n    const stacktrace = new Error().stack;\n    this.sql = sql.replace(/;$/, '');\n\n    return new Promise((resolve, reject) => {\n      const complete = this._logQuery(sql, debug, parameters);\n      this.connection.query(this.sql, parameters, (error, results) => {\n\n        if (error) {\n          const formattedError = this.formatError(error, stacktrace);\n          reject(formattedError);\n\n          return;\n        }\n\n        complete();\n\n        // parse the results to the format sequelize expects\n        for (const result of results) {\n          for (const column of results.columns) {\n            const typeId = column.dataType;\n            const parse = parserStore.get(typeId);\n            const value = result[column.name];\n            if (value !== null && parse) {\n              result[column.name] = parse(value);\n            }\n          }\n        }\n\n        resolve(results);\n      });\n    })\n      .then(results => this.formatResults(results));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        for (const key in data[0]) {\n          if (Object.prototype.hasOwnProperty.call(data[0], key)) {\n            const record = data[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null,\n        ];\n      }\n\n      return [\n        this.instance || data && (this.options.plain && data[0] || data) || undefined,\n        data.count,\n      ];\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.COLUMN_NAME] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.DATA_TYPE.toUpperCase(),\n          allowNull: _result.IS_NULLABLE === 'Y',\n          defaultValue: _result.COLUMN_DEFAULT,\n          primaryKey: _result.CONSTRAINT_TYPE === 'PRIMARY KEY',\n          autoIncrement: _result.IS_GENERATED !== 'IDENTITY_GENERATION',\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      return data.count;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].VERSION;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isInsertQuery(data)) {\n      // insert queries can't call count, because they are actually select queries wrapped around insert queries to get the inserted id. Need to count the number of results instead.\n      return [result, data.length];\n    }\n\n    if (this.isUpdateQuery()) {\n      return [result, data.count];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return data;\n    }\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute.field;\n      let id = null;\n\n      id = id || results && results[autoIncrementAttribute];\n      id = id || metaData && metaData[autoIncrementAttribute];\n\n      this.instance[this.model.autoIncrementAttribute] = id;\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n\n    const indexes = Object.create(null);\n\n    data.forEach(item => {\n\n      if (Object.prototype.hasOwnProperty.call(indexes, item.NAME)) {\n        indexes[item.NAME].fields.push({ attribute: item.COLUMN_NAME, length: undefined, order: undefined, collate: undefined });\n      } else {\n        indexes[item.NAME] = {\n          primary: item.CONSTRAINT_TYPE === 'PRIMARY KEY',\n          fields: [{ attribute: item.COLUMN_NAME, length: undefined, order: undefined, collate: undefined }],\n          name: item.NAME,\n          tableName: item.TABLE_NAME,\n          unique: item.CONSTRAINT_TYPE === 'PRIMARY KEY' || item.CONSTRAINT_TYPE === 'UNIQUE',\n          type: item.CONSTRAINT_TYPE,\n        };\n      }\n    });\n\n    return Object.values(indexes);\n  }\n\n  formatError(err, stacktrace) {\n\n    // Db2 for i uses the `odbc` connector. The `odbc` connector returns a list\n    // of odbc errors, each of which has a code and a state. To determine the\n    // type of SequelizeError, check the code and create the associated error.\n    // Error codes can be found at:\n    // https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzala/rzalaccl.htm\n\n    // some errors occur outside of ODBC (e.g. connection errors)\n    if (err.toString().includes('Error connecting to the database')) {\n      return new sequelizeErrors.ConnectionRefusedError(err);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(err, 'odbcErrors') && err.odbcErrors.length > 0) {\n      const odbcError = err.odbcErrors[0];\n      const foreignKeyConstraintCodes = [\n        -530, // The insert or update value of a foreign key is invalid.\n        -531, // The update or delete of a parent key is prevented by a NO ACTION update or delete rule.\n        -532, // The update or delete of a parent key is prevented by a NO ACTION update or delete rule.\n      ];\n      const uniqueConstraintCodes = [\n        -803, // A violation of the constraint imposed by a unique index or a unique constraint occurred.\n      ];\n\n      if (foreignKeyConstraintCodes.includes(odbcError.code)) {\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          cause: err,\n          sql: {},\n          fields: {},\n          stack: stacktrace,\n        });\n      }\n\n      if (uniqueConstraintCodes.includes(odbcError.code)) {\n        return new sequelizeErrors.UniqueConstraintError({\n          errors: err.odbcErrors,\n          cause: err,\n          sql: {},\n          fields: {},\n          stack: stacktrace,\n        });\n      }\n\n      if (odbcError.code === -204) {\n        let constraintName;\n        let type;\n        const constraintNameRegex = /\"([^)]+?)\" in [^]+? type (\\*\\w+?) not found./;\n        const constraintNameRegexMatches = odbcError.message.match(constraintNameRegex);\n        if (constraintNameRegexMatches && constraintNameRegexMatches.length === 3) {\n          constraintName = constraintNameRegexMatches[1];\n          type = constraintNameRegexMatches[2];\n\n          if (type === '*N') {\n            return new sequelizeErrors.UnknownConstraintError({\n              cause: err,\n              constraint: constraintName,\n            });\n          }\n        }\n      }\n\n      return new sequelizeErrors.DatabaseError(odbcError, { stack: stacktrace });\n    }\n\n    return err;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
