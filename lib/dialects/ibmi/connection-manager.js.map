{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst { ConnectionManager } = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('connection:ibmi');\nconst parserStore = require('../parserStore')('ibmi');\nconst DataTypes = require('../../data-types').ibmi;\n\nexport class IBMiConnectionManager extends ConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('odbc');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async connect(config) {\n    // Combine passed connection options into a connection string\n    // config.port has no real meaning for this ODBC Driver\n    const connectionKeywords = [];\n    if (config.dialectOptions && config.dialectOptions.odbcConnectionString) {\n      connectionKeywords.push(config.dialectOptions.odbcConnectionString);\n    }\n\n    // 'database' doesn't make sense in this context, but it is mapped here to\n    // DSN, which is a close fit\n    if (config.database) {\n      connectionKeywords.push(`DSN=${config.database}`);\n    }\n\n    if (config.username) {\n      connectionKeywords.push(`UID=${config.username}`);\n    }\n\n    if (config.password) {\n      connectionKeywords.push(`PWD=${config.password}`);\n    }\n\n    if (config.host) {\n      connectionKeywords.push(`SYSTEM=${config.host}`);\n    }\n\n    const connectionString = connectionKeywords.join(';');\n    if (connectionString.charAt(connectionString.length - 1) !== ';') {\n      connectionString.concat(';');\n    }\n\n    let connection;\n    try {\n      connection = await this.lib.connect(connectionString);\n    } catch (error) {\n      if (error.toString().includes('Error connecting to the database')) {\n        const err = new SequelizeErrors.ConnectionRefusedError(error);\n        throw (err);\n      }\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    return new Promise((resolve, reject) => {\n      if (!this.validate(connection)) {\n        debug('Tried to disconnect, but connection was already closed.');\n        resolve();\n      }\n\n      connection.close(error => {\n        if (error) {\n          reject(error);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  validate(connection) {\n    return connection.isConnected;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,EAAE,sBAAsB,QAAQ,gCAAgC;AACtE,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,WAAW,QAAQ,oBAAoB;AAE/C,MAAM,QAAQ,OAAO,aAAa,iBAAiB;AACnD,MAAM,cAAc,QAAQ,gBAAgB,EAAE,MAAM;AACpD,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAEvC,MAAM,8BAA8B,kBAAkB;AAAA,EAC3D,YAAY,SAAS,WAAW;AAC9B,UAAM,SAAS,SAAS;AAExB,SAAK,cAAc,CAAC;AACpB,SAAK,MAAM,KAAK,mBAAmB,MAAM;AACzC,SAAK,kBAAkB,SAAS;AAAA,EAClC;AAAA,EAEA,mBAAmB,UAAU;AAC3B,gBAAY,QAAQ,QAAQ;AAAA,EAC9B;AAAA,EAEA,mBAAmB;AACjB,gBAAY,MAAM;AAAA,EACpB;AAAA,QAEM,QAAQ,QAAQ;AAGpB,UAAM,qBAAqB,CAAC;AAC5B,QAAI,OAAO,kBAAkB,OAAO,eAAe,sBAAsB;AACvE,yBAAmB,KAAK,OAAO,eAAe,oBAAoB;AAAA,IACpE;AAIA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,MAAM;AACf,yBAAmB,KAAK,UAAU,OAAO,MAAM;AAAA,IACjD;AAEA,UAAM,mBAAmB,mBAAmB,KAAK,GAAG;AACpD,QAAI,iBAAiB,OAAO,iBAAiB,SAAS,CAAC,MAAM,KAAK;AAChE,uBAAiB,OAAO,GAAG;AAAA,IAC7B;AAEA,QAAI;AACJ,QAAI;AACF,mBAAa,MAAM,KAAK,IAAI,QAAQ,gBAAgB;AAAA,IACtD,SAAS,OAAP;AACA,UAAI,MAAM,SAAS,EAAE,SAAS,kCAAkC,GAAG;AACjE,cAAM,MAAM,IAAI,gBAAgB,uBAAuB,KAAK;AAC5D,cAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,QAEM,WAAW,YAAY;AAC3B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,CAAC,KAAK,SAAS,UAAU,GAAG;AAC9B,cAAM,yDAAyD;AAC/D,gBAAQ;AAAA,MACV;AAEA,iBAAW,MAAM,WAAS;AACxB,YAAI,OAAO;AACT,iBAAO,KAAK;AAAA,QACd;AAEA,gBAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,SAAS,YAAY;AACnB,WAAO,WAAW;AAAA,EACpB;AACF;",
  "names": []
}
