{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/data-types.js"],
  "sourcesContent": ["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE,\n  };\n};\n"],
  "mappings": ";AAEA,MAAM,WAAW,QAAQ,iBAAiB;AAC1C,MAAM,SAAS,QAAQ,QAAQ;AAE/B,OAAO,UAAU,eAAa;AAC5B,YAAU,SAAS,UAAU,eAAe;AAS5C,YAAU,KAAK,MAAM,YAAY,CAAC,UAAU;AAC5C,YAAU,OAAO,MAAM,YAAY,CAAC,YAAY;AAChD,YAAU,KAAK,MAAM,YAAY,CAAC,QAAQ;AAC1C,YAAU,KAAK,MAAM,YAAY,CAAC,MAAM;AACxC,YAAU,QAAQ,MAAM,YAAY,CAAC,MAAM;AAC3C,YAAU,SAAS,MAAM,YAAY,CAAC,OAAO;AAC7C,YAAU,UAAU,MAAM,YAAY,CAAC,OAAO;AAC9C,YAAU,QAAQ,MAAM,YAAY,CAAC,MAAM;AAC3C,YAAU,OAAO,MAAM,YAAY,CAAC,UAAU;AAC9C,YAAU,MAAM,MAAM,YAAY,CAAC,OAAO;AAC1C,YAAU,KAAK,MAAM,YAAY,CAAC,MAAM;AACxC,YAAU,SAAS,MAAM,YAAY,CAAC,MAAM;AAC5C,YAAU,QAAQ,MAAM,YAAY,CAAC,MAAM;AAC3C,YAAU,KAAK,MAAM,YAAY,CAAC,YAAY,QAAQ,UAAU;AAChE,YAAU,QAAQ,MAAM,YAAY,CAAC,YAAY;AACjD,YAAU,KAAK,MAAM,YAAY;AAGjC,YAAU,KAAK,MAAM,YAAY;AACjC,YAAU,KAAK,MAAM,YAAY,CAAC,QAAQ;AAC1C,YAAU,OAAO,MAAM,YAAY,CAAC,QAAQ;AAC5C,YAAU,SAAS,MAAM,YAAY,CAAC,UAAU;AAChD,YAAU,KAAK,MAAM,YAAY,CAAC,MAAM;AAExC,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,IAEA,WAAW,MAAM,SAAS;AACxB,UAAI,CAAC,OAAO,SAAS,IAAI,GAAG;AAC1B,eAAO,KAAK,eAAe,MAAM,OAAO;AAAA,MAC1C;AAEA,UAAI,KAAK,SAAS;AAChB,eAAO,KAAK,OAAO,yBAAyB;AAAA,MAC9C;AAEA,aAAO,KAAK,OAAO,qBAAqB;AAAA,IAC1C;AAAA,WAEO,MAAM,OAAO,SAAS;AAC3B,cAAQ,MAAM,OAAO;AACrB,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AAEA,UAAI,SAAS,GAAG,KAAK,QAAQ,QAAQ,GAAG;AACtC,gBAAQ,SAAS,GAAG,OAAO,QAAQ,QAAQ,EAAE,OAAO;AAAA,MACtD,OAAO;AACL,gBAAQ,IAAI,KAAK,GAAG,SAAS,QAAQ,UAAU;AAAA,MACjD;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,SAAS;AAAA,WACjC,MAAM,OAAO;AAClB,aAAO,MAAM,OAAO;AAAA,IACtB;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AAEN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,gBAAgB,UAAU,QAAQ;AAAA,IACtC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,KAAK;AAAA,IACpC,WAAW,OAAO,SAAS;AACzB,aAAO,QAAQ,cAAc,WAAW,OAAO,UAAU,WAAW,QAAQ,KAAK,UAAU,KAAK;AAAA,IAClG;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACR;AACF;",
  "names": []
}
