{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/connection-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst { ConnectionManager } = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').snowflake;\n\nconst debug = logger.debugContext('connection:snowflake');\nconst parserStore = require('../parserStore')('snowflake');\n\n/**\n * Snowflake Connection Manager\n *\n * Get connections, validate and disconnect them.\n *\n * @private\n */\nexport class SnowflakeConnectionManager extends ConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('snowflake-sdk');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n\n    return next();\n  }\n\n  /**\n   * Connect with a snowflake database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      account: config.host,\n      username: config.username,\n      password: config.password,\n      database: config.database,\n      warehouse: config.warehouse,\n      role: config.role,\n      /*\n      flags: '-FOUND_ROWS',\n      timezone: this.sequelize.options.timezone,\n      typeCast: SnowflakeConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      */\n      ...config.dialectOptions,\n    };\n\n    try {\n\n      const connection = await new Promise((resolve, reject) => {\n        this.lib.createConnection(connectionConfig).connect((err, conn) => {\n          if (err) {\n            console.error(err);\n            reject(err);\n          } else {\n            resolve(conn);\n          }\n        });\n      });\n\n      debug('connection acquired');\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // default value is '+00:00', put a quick workaround for it.\n        const tzOffset = this.sequelize.options.timezone === '+00:00' ? 'Etc/UTC' : this.sequelize.options.timezone;\n        const isNamedTzOffset = /\\//.test(tzOffset);\n        if (isNamedTzOffset) {\n          await new Promise((resolve, reject) => {\n            connection.execute({\n              sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,\n              complete(err) {\n                if (err) {\n                  console.error(err);\n                  reject(err);\n                } else {\n                  resolve();\n                }\n              },\n            });\n          });\n        } else {\n          throw new Error('only support time zone name for snowflake!');\n        }\n      }\n\n      return connection;\n    } catch (error) {\n      switch (error.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(error);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(error);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(error);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new SequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isUp()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      connection.destroy(err => {\n        if (err) {\n          console.error(`Unable to disconnect: ${err.message}`);\n          reject(err);\n        } else {\n          console.error(`Disconnected connection with id: ${connection.getId()}`);\n          resolve(connection.getId());\n        }\n      });\n    });\n  }\n\n  validate(connection) {\n    return connection.isUp();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
