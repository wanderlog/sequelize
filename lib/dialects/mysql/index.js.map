{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/index.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst { AbstractDialect } = require('../abstract');\nconst { MySqlConnectionManager } = require('./connection-manager');\nconst { MySqlQuery } = require('./query');\nconst { MySqlQueryGenerator } = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\nconst { MySqlQueryInterface } = require('./query-interface');\n\nexport class MysqlDialect extends AbstractDialect {\n  static supports = _.merge(\n    _.cloneDeep(AbstractDialect.supports),\n    {\n      'VALUES ()': true,\n      'LIMIT ON UPDATE': true,\n      lock: true,\n      forShare: 'LOCK IN SHARE MODE',\n      settingIsolationLevelDuringTransaction: false,\n      inserts: {\n        ignoreDuplicates: ' IGNORE',\n        updateOnDuplicate: ' ON DUPLICATE KEY UPDATE',\n      },\n      index: {\n        collate: false,\n        length: true,\n        parser: true,\n        type: true,\n        using: 1,\n      },\n      constraints: {\n        dropConstraint: false,\n        check: false,\n      },\n      indexViaAlter: true,\n      indexHints: true,\n      NUMERIC: true,\n      GEOMETRY: true,\n      JSON: true,\n      REGEXP: true,\n    },\n  );\n\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new MySqlConnectionManager(this, sequelize);\n    this.queryGenerator = new MySqlQueryGenerator({\n      _dialect: this,\n      sequelize,\n    });\n    this.queryInterface = new MySqlQueryInterface(\n      sequelize,\n      this.queryGenerator,\n    );\n  }\n}\n\nMysqlDialect.prototype.defaultVersion = '5.7.0'; // minimum supported version\nMysqlDialect.prototype.Query = MySqlQuery;\nMysqlDialect.prototype.QueryGenerator = MySqlQueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,EAAE,oBAAoB,QAAQ,aAAa;AACjD,MAAM,EAAE,2BAA2B,QAAQ,sBAAsB;AACjE,MAAM,EAAE,eAAe,QAAQ,SAAS;AACxC,MAAM,EAAE,wBAAwB,QAAQ,mBAAmB;AAC3D,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAC9C,MAAM,EAAE,wBAAwB,QAAQ,mBAAmB;AAEpD,MAAM,qBAAqB,gBAAgB;AAAA,SACzC,WAAW,EAAE,MAClB,EAAE,UAAU,gBAAgB,QAAQ,GACpC;AAAA,IACE,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,wCAAwC;AAAA,IACxC,SAAS;AAAA,MACP,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,IACrB;AAAA,IACA,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,IACA,aAAa;AAAA,MACX,gBAAgB;AAAA,MAChB,OAAO;AAAA,IACT;AAAA,IACA,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,UAAU;AAAA,IACV,MAAM;AAAA,IACN,QAAQ;AAAA,EACV,CACF;AAAA,EAEA,YAAY,WAAW;AACrB,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,oBAAoB,IAAI,uBAAuB,MAAM,SAAS;AACnE,SAAK,iBAAiB,IAAI,oBAAoB;AAAA,MAC5C,UAAU;AAAA,MACV;AAAA,IACF,CAAC;AACD,SAAK,iBAAiB,IAAI,oBACxB,WACA,KAAK,cACP;AAAA,EACF;AACF;AAEA,aAAa,UAAU,iBAAiB;AACxC,aAAa,UAAU,QAAQ;AAC/B,aAAa,UAAU,iBAAiB;AACxC,aAAa,UAAU,YAAY;AACnC,aAAa,UAAU,OAAO;AAC9B,aAAa,UAAU,YAAY;AACnC,aAAa,UAAU,iBAAiB,aAAa,UAAU;AAC/D,aAAa,UAAU,kBAAkB,aAAa,UAAU;",
  "names": []
}
