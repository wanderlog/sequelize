{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/data-types.js"],
  "sourcesContent": ["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      // Fractional DATETIMEs only supported on MySQL 5.6.4+\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n\n        return;\n      }\n\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n\n        return;\n      }\n\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(', ')}`);\n    }\n\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE,\n  };\n};\n"],
  "mappings": ";AAEA,MAAM,MAAM,QAAQ,KAAK;AACzB,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,WAAW,QAAQ,iBAAiB;AAC1C,MAAM,SAAS,QAAQ,QAAQ;AAE/B,OAAO,UAAU,eAAa;AAC5B,YAAU,SAAS,UAAU,eAAe;AAS5C,YAAU,KAAK,MAAM,QAAQ,CAAC,UAAU;AACxC,YAAU,OAAO,MAAM,QAAQ,CAAC,YAAY;AAC5C,YAAU,KAAK,MAAM,QAAQ,CAAC,QAAQ;AACtC,YAAU,KAAK,MAAM,QAAQ,CAAC,MAAM;AACpC,YAAU,QAAQ,MAAM,QAAQ,CAAC,MAAM;AACvC,YAAU,SAAS,MAAM,QAAQ,CAAC,OAAO;AACzC,YAAU,UAAU,MAAM,QAAQ,CAAC,OAAO;AAC1C,YAAU,QAAQ,MAAM,QAAQ,CAAC,MAAM;AACvC,YAAU,OAAO,MAAM,QAAQ,CAAC,UAAU;AAC1C,YAAU,MAAM,MAAM,QAAQ,CAAC,OAAO;AACtC,YAAU,KAAK,MAAM,QAAQ,CAAC,MAAM;AACpC,YAAU,SAAS,MAAM,QAAQ,CAAC,MAAM;AACxC,YAAU,QAAQ,MAAM,QAAQ,CAAC,MAAM;AACvC,YAAU,KAAK,MAAM,QAAQ,CAAC,YAAY,QAAQ,UAAU;AAC5D,YAAU,QAAQ,MAAM,QAAQ,CAAC,YAAY;AAC7C,YAAU,KAAK,MAAM,QAAQ;AAC7B,YAAU,KAAK,MAAM,QAAQ;AAC7B,YAAU,KAAK,MAAM,QAAQ,CAAC,QAAQ;AACtC,YAAU,OAAO,MAAM,QAAQ,CAAC,QAAQ;AACxC,YAAU,SAAS,MAAM,QAAQ,CAAC,UAAU;AAC5C,YAAU,KAAK,MAAM,QAAQ,CAAC,MAAM;AAEpC,QAAM,gBAAgB,UAAU,QAAQ;AAAA,IACtC,QAAQ;AACN,UAAI,aAAa,MAAM,MAAM;AAC7B,UAAI,KAAK,WAAW;AAClB,sBAAc;AAAA,MAChB;AAEA,UAAI,KAAK,WAAW;AAClB,sBAAc;AAAA,MAChB;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO,KAAK,UAAU,YAAY,KAAK,aAAa;AAAA,IACtD;AAAA,IAEA,WAAW,MAAM,SAAS;AACxB,UAAI,CAAC,OAAO,SAAS,IAAI,GAAG;AAC1B,eAAO,KAAK,eAAe,MAAM,OAAO;AAAA,MAC1C;AAGA,UAAI,KAAK,SAAS;AAChB,eAAO,KAAK,OAAO,yBAAyB;AAAA,MAC9C;AAEA,aAAO,KAAK,OAAO,qBAAqB;AAAA,IAC1C;AAAA,WAEO,MAAM,OAAO,SAAS;AAC3B,cAAQ,MAAM,OAAO;AACrB,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AAEA,UAAI,SAAS,GAAG,KAAK,QAAQ,QAAQ,GAAG;AACtC,gBAAQ,SAAS,GAAG,OAAO,QAAQ,QAAQ,EAAE,OAAO;AAAA,MACtD,OAAO;AACL,gBAAQ,IAAI,KAAK,GAAG,SAAS,QAAQ,UAAU;AAAA,MACjD;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,SAAS;AAAA,WACjC,MAAM,OAAO;AAClB,aAAO,MAAM,OAAO;AAAA,IACtB;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,2BAA2B,CAAC,SAAS,cAAc,SAAS;AAElE,QAAM,iBAAiB,UAAU,SAAS;AAAA,IACxC,YAAY,MAAM,MAAM;AACtB,YAAM,MAAM,IAAI;AAChB,UAAI,EAAE,QAAQ,KAAK,IAAI,GAAG;AACxB,aAAK,UAAU,KAAK;AAEpB;AAAA,MACF;AAEA,UAAI,yBAAyB,SAAS,KAAK,IAAI,GAAG;AAChD,aAAK,UAAU,KAAK;AAEpB;AAAA,MACF;AAEA,YAAM,IAAI,MAAM,iCAAiC,yBAAyB,KAAK,IAAI,GAAG;AAAA,IACxF;AAAA,WAEO,MAAM,OAAO;AAClB,cAAQ,MAAM,OAAO;AAGrB,UAAI,CAAC,SAAS,MAAM,WAAW,GAAG;AAChC,eAAO;AAAA,MACT;AAGA,cAAQ,MAAM,MAAM,CAAC;AAErB,aAAO,IAAI,SAAS,MAAM,KAAK,EAAE,UAAU,EAAE,UAAU,KAAK,CAAC;AAAA,IAC/D;AAAA,IAEA,QAAQ;AACN,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,MAAM,SAAS;AACb,aAAO,QAAQ,KAAK,OAAO,IAAI,WAAS,QAAQ,OAAO,KAAK,CAAC,EAAE,KAAK,IAAI;AAAA,IAC1E;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,KAAK;AAAA,IACpC,WAAW,OAAO,SAAS;AACzB,aAAO,QAAQ,cAAc,WAAW,OAAO,UAAU,WAAW,QAAQ,KAAK,UAAU,KAAK;AAAA,IAClG;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACR;AACF;",
  "names": []
}
