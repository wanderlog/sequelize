{
  "version": 3,
  "sources": ["../../src/associations/mixin.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst { HasOne } = require('./has-one');\nconst { HasMany } = require('./has-many');\nconst { BelongsToMany } = require('./belongs-to-many');\nconst { BelongsTo } = require('./belongs-to');\n\nfunction isModel(model, sequelize) {\n  return model\n    && model.prototype\n    && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nexport const Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    Object.assign(options, _.omit(source.options, ['hooks']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: HasMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: HasMany, association }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: BelongsToMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: BelongsToMany, association }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  },\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function declareAssociation(target, options = {}) {\n\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks('beforeAssociate', { source, target, type: Type }, options);\n    }\n\n    // the id is in the foreign table\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks('afterAssociate', { source, target, type: Type, association }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\n\n"],
  "mappings": "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",
  "names": []
}
