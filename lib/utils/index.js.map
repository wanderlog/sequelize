{
  "version": 3,
  "sources": ["../../src/utils/index.ts"],
  "sourcesContent": ["import type { Optional } from '..';\nimport { getComplexKeys } from './format';\n\nexport * from './array';\nexport * from './check';\nexport * from './class-to-invokable';\nexport * from './dialect';\nexport * from './format';\nexport * from './join-sql-fragments';\nexport * from './object';\nexport * from './sequelize-method';\nexport * from './string';\n\n/**\n * getComplexSize\n *\n * @param obj\n * @returns Length of object properties including operators if obj is array returns its length\n * @private\n */\nexport function getComplexSize(obj: object | any[]): number {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\n\nexport type DeepWriteable<T> = { -readonly [P in keyof T]: DeepWriteable<T[P]> };\n\nexport type PartlyRequired<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\n\nexport type AnyFunction = (...args: any[]) => any;\n\n/**\n * Returns all shallow properties that accept `undefined` or `null`.\n * Does not include Optional properties, only `undefined` or `null`.\n *\n * @example\n * ```typescript\n * type UndefinedProps = NullishPropertiesOf<{\n *   id: number | undefined,\n *   createdAt: string | undefined,\n *   firstName: string | null, // nullable properties are included\n *   lastName?: string, // optional properties are not included.\n * }>;\n *\n * // is equal to\n *\n * type UndefinedProps = 'id' | 'createdAt' | 'firstName';\n * ```\n */\nexport type NullishPropertiesOf<T> = {\n  [P in keyof T]-?: undefined extends T[P] ? P\n    : null extends T[P] ? P\n      : never\n}[keyof T];\n\n/**\n * Makes all shallow properties of an object `optional` if they accept `undefined` or `null` as a value.\n *\n * @example\n * ```typescript\n * type MyOptionalType = MakeUndefinedOptional<{\n *   id: number | undefined,\n *   firstName: string,\n *   lastName: string | null,\n * }>;\n *\n * // is equal to\n *\n * type MyOptionalType = {\n *   // this property is optional.\n *   id?: number | undefined,\n *   firstName: string,\n *   // this property is optional.\n *   lastName?: string | null,\n * };\n * ```\n */\nexport type MakeNullishOptional<T extends object> = Optional<T, NullishPropertiesOf<T>>;\n\n/**\n * Makes the type accept null & undefined\n */\nexport type Nullish<T> = T | null | undefined;\nexport type AllowArray<T> = T | T[];\nexport type AllowReadonlyArray<T> = T | readonly T[];\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAA+B;AAE/B,0BAAc,oBAHd;AAIA,0BAAc,oBAJd;AAKA,0BAAc,iCALd;AAMA,0BAAc,sBANd;AAOA,0BAAc,qBAPd;AAQA,0BAAc,iCARd;AASA,0BAAc,qBATd;AAUA,0BAAc,+BAVd;AAWA,0BAAc,qBAXd;AAoBO,wBAAwB,KAA6B;AAC1D,SAAO,MAAM,QAAQ,GAAG,IAAI,IAAI,SAAS,kCAAe,GAAG,EAAE;AAC/D;",
  "names": []
}
