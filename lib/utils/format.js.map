{
  "version": 3,
  "sources": ["../../src/utils/format.ts"],
  "sourcesContent": ["import forIn from 'lodash/forIn';\nimport isPlainObject from 'lodash/isPlainObject';\nimport type { Model, ModelStatic, WhereOptions, ModelAttributeColumnOptions, Attributes } from '..';\n// eslint-disable-next-line import/order -- caused by temporarily mixing require with import\nimport { Op as operators } from '../operators';\n\nconst DataTypes = require('../data-types');\nconst SqlString = require('../sql-string');\n\nconst operatorsSet = new Set(Object.values(operators));\n\nexport function format(arr: unknown[], dialect: string): string {\n  const timeZone = null;\n\n  // Make a clone of the array because format modifies the passed args\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\n\nexport function formatNamedParameters(\n  sql: string,\n  parameters: Record<string, unknown>,\n  dialect: string,\n): string {\n  return SqlString.formatNamedParameters(sql, parameters, null, dialect);\n}\n\nexport type FinderOptions<TAttributes> = {\n  attributes?: string[],\n  where?: WhereOptions<TAttributes>,\n};\n\nexport type MappedFinderOptions<TAttributes> = Omit<FinderOptions<TAttributes>, 'attributes'> & {\n  // an array of attribute-column mapping, or just attributes\n  attributes?: Array<[columnName: string, attributeName: string] | string>,\n};\n\n/**\n * Expand and normalize finder options.\n * Mutates the \"options\" parameter.\n *\n * @param options\n * @param Model\n */\nexport function mapFinderOptions<M extends Model, T extends FinderOptions<Attributes<M>>>(\n  options: T,\n  Model: ModelStatic<Model>,\n): MappedFinderOptions<Attributes<M>> {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(\n      options.attributes,\n    );\n\n    options.attributes = options.attributes.filter(\n      v => !Model._virtualAttributes.has(v),\n    );\n  }\n\n  mapOptionFieldNames(options, Model);\n\n  return options;\n}\n\n/**\n * Used to map field names in attributes and where conditions.\n *\n * Mutates the \"options\" parameter.\n *\n * @param options\n * @param Model\n */\nexport function mapOptionFieldNames<M extends Model>(\n  options: FinderOptions<Attributes<M>>,\n  Model: ModelStatic<Model>,\n): MappedFinderOptions<Attributes<M>> {\n\n  // note: parts of Sequelize rely on this function mutating its inputs.\n  //  be aware that these places need to be fixed before trying to make this a pure function.\n  //  - ephys\n\n  const out: MappedFinderOptions<Attributes<M>> = options;\n\n  if (Array.isArray(options.attributes)) {\n    out.attributes = options.attributes.map(attributeName => {\n      // Object lookups will force any variable to strings, we don't want that for special objects etc\n      if (typeof attributeName !== 'string') {\n        return attributeName;\n      }\n\n      // Map attributes to column names\n      const columnName: string | undefined = Model.rawAttributes[attributeName]?.field;\n      if (columnName && columnName !== attributeName) {\n        return [columnName, attributeName];\n      }\n\n      return attributeName;\n    });\n  }\n\n  if (options.where != null && isPlainObject(options.where)) {\n    // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- this fails in TS 4.4 and up, but not before\n    // @ts-ignore the work necessary to type the return type of mapWhereFieldNames is not worth it\n    out.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return out;\n}\n\nexport function mapWhereFieldNames(where: Record<string | symbol, any>, Model: ModelStatic<Model>): object {\n  if (!where) {\n    return where;\n  }\n\n  const newWhere: Record<string | symbol, any> = Object.create(null);\n  // TODO [2022-09-01]: note on 'as any[]': TypeScript < 4.4 does not support using Symbol for keys.\n  //  Cast can be removed in sept. 2022 when we drop support for < 4.4\n  for (const attributeNameOrOperator of getComplexKeys(where) as any[]) {\n    const rawAttribute: ModelAttributeColumnOptions | undefined = Model.rawAttributes[attributeNameOrOperator];\n\n    // TODO [2022-09-01]: note on 'any': TypeScript < 4.4 does not support using Symbol for keys.\n    //  Cast can changed back to 'symbol | string' in sept. 2022 when we drop support for < 4.4\n    const columnNameOrOperator: any = rawAttribute?.field ?? attributeNameOrOperator;\n\n    if (\n      isPlainObject(where[attributeNameOrOperator])\n        && !(\n          rawAttribute\n          && (rawAttribute.type instanceof DataTypes.HSTORE\n            || rawAttribute.type instanceof DataTypes.JSON)\n        )\n    ) {\n      // Prevent renaming of HSTORE & JSON fields\n      newWhere[columnNameOrOperator] = mapOptionFieldNames(\n        {\n          where: where[attributeNameOrOperator],\n        },\n        Model,\n      ).where;\n\n      continue;\n    }\n\n    if (Array.isArray(where[attributeNameOrOperator])) {\n      newWhere[columnNameOrOperator] = [...where[attributeNameOrOperator]];\n\n      for (const [index, wherePart] of where[attributeNameOrOperator].entries()) {\n        if (isPlainObject(wherePart)) {\n          newWhere[columnNameOrOperator][index] = mapWhereFieldNames(wherePart, Model);\n        }\n      }\n\n      continue;\n    }\n\n    newWhere[columnNameOrOperator] = where[attributeNameOrOperator];\n  }\n\n  return newWhere;\n}\n\n/**\n * getComplexKeys\n *\n * @param obj\n * @returns All keys including operators\n * @private\n */\nexport function getComplexKeys(obj: object): Array<string | symbol> {\n  return [\n    ...getOperators(obj),\n    ...Object.keys(obj),\n  ];\n}\n\n/**\n * getOperators\n *\n * @param obj\n * @returns All operators properties of obj\n * @private\n */\nexport function getOperators(obj: object): symbol[] {\n  return Object.getOwnPropertySymbols(obj).filter(s => operatorsSet.has(s));\n}\n\nexport function combineTableNames(tableName1: string, tableName2: string): string {\n  return tableName1.toLowerCase() < tableName2.toLowerCase()\n    ? tableName1 + tableName2\n    : tableName2 + tableName1;\n}\n\n/**\n * Used to map field names in values\n *\n * @param dataValues\n * @param attributeNames\n * @param ModelClass\n */\nexport function mapValueFieldNames( // TODO: rename to mapAttributesToColumNames? See https://github.com/sequelize/meetings/issues/17\n  dataValues: Record<string, any>,\n  attributeNames: string[],\n  ModelClass: ModelStatic<Model>,\n): Record<string, any> {\n  const values: Record<string, any> = Object.create(null);\n\n  for (const attributeName of attributeNames) {\n    if (dataValues[attributeName] !== undefined && !ModelClass._virtualAttributes.has(attributeName)) {\n      // Field name mapping\n      const columnName = ModelClass.rawAttributes[attributeName]?.field ?? attributeName;\n\n      values[columnName] = dataValues[attributeName];\n    }\n  }\n\n  return values;\n}\n\n/**\n * Removes entries from `hash` whose value is either null or undefined, unless `omitNull` is false or `allowNull` includes that key.\n *\n * Keys ending with 'Id' are never removed.\n *\n * @param hash the object from which entries with nullish values will be removed.\n * @param omitNull if false, this method returns the object as-is\n * @param options\n * @param options.allowNull A list of keys that must be preserved even if their value is null or undefined.\n */\nexport function removeNullishValuesFromHash(\n  hash: Record<string, any>,\n  omitNull: boolean,\n  options?: { allowNull?: string[] },\n): Record<string, any> {\n  let result = hash;\n\n  const allowNull = options?.allowNull ?? [];\n\n  if (!omitNull) {\n    return result;\n  }\n\n  const _hash: { [key: string]: any } = Object.create(null);\n\n  forIn(hash, (val: any, key: string) => {\n    if (\n      allowNull.includes(key)\n        || key.endsWith('Id')\n        || val !== null && val !== undefined\n    ) {\n      _hash[key] = val;\n    }\n  });\n\n  result = _hash;\n\n  return result;\n}\n\n/**\n * Returns ENUM name by joining table and column name\n *\n * @param tableName\n * @param columnName\n * @private\n */\nexport function generateEnumName(\n  tableName: string,\n  columnName: string,\n): string {\n  return `enum_${tableName}_${columnName}`;\n}\n"],
  "mappings": "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",
  "names": []
}
