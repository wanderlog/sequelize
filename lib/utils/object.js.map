{
  "version": 3,
  "sources": ["../../src/utils/object.ts"],
  "sourcesContent": ["import cloneDeepWith from 'lodash/cloneDeepWith';\nimport isEqual from 'lodash/eq';\nimport forOwn from 'lodash/forOwn';\nimport getValue from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport isPlainObject from 'lodash/isPlainObject';\nimport mergeWith from 'lodash/mergeWith';\nimport { getComplexKeys } from './format';\n// eslint-disable-next-line import/order -- caused by temporarily mixing require with import\nimport { camelize } from './string';\n\nconst baseIsNative = require('lodash/_baseIsNative');\n\n/**\n * Deeply merges object `b` into `a`.\n * Mutates `a`.\n *\n * Same concept as _.merge, but doesn't overwrite properties that have already been assigned.\n *\n * @param a\n * @param b\n */\nexport function mergeDefaults<T>(a: T, b: Partial<T>): T {\n  return mergeWith(a, b, (objectValue, sourceValue) => {\n    // If it's an object, let _ handle it this time, we will be called again for each property\n    if (!isPlainObject(objectValue) && objectValue !== undefined) {\n      // _.isNative includes a check for core-js and throws an error if present.\n      // Depending on _baseIsNative bypasses the core-js check.\n      if (isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n\n      return objectValue;\n    }\n\n    // eslint-disable-next-line consistent-return,no-useless-return -- lodash actually wants us to return `undefined` to fallback to the default customizer.\n    return;\n  });\n}\n\n/**\n * An alternative to _.merge, which doesn't clone its arguments.\n *\n * Does not mutate parameters.\n *\n * Cloning is a bad idea because options arguments may contain references to sequelize\n * models - which again reference database libs which don't like to be cloned (in particular pg-native)\n *\n * @param args\n */\nexport function merge(...args: object[]): object {\n  const result: { [key: string]: any } = Object.create(null);\n\n  for (const obj of args) {\n    forOwn(obj, (value, key) => {\n      if (value === undefined) {\n        return;\n      }\n\n      if (!result[key]) {\n        result[key] = value;\n      } else if (isPlainObject(value) && isPlainObject(result[key])) {\n        result[key] = merge(result[key], value);\n      } else if (Array.isArray(value) && Array.isArray(result[key])) {\n        result[key] = [...value, ...result[key]];\n      } else {\n        result[key] = value;\n      }\n    });\n  }\n\n  return result;\n}\n\n/* eslint-disable consistent-return -- lodash actually wants us to return `undefined` to fallback to the default customizer. */\nexport function cloneDeep<T extends object>(obj: T, onlyPlain?: boolean): T {\n  return cloneDeepWith(obj || {}, elem => {\n    // Do not try to customize cloning of arrays or POJOs\n    if (Array.isArray(elem) || isPlainObject(elem)) {\n      return;\n    }\n\n    // If we specified to clone only plain objects & arrays, we ignore everyhing else\n    // In any case, don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances\n    if (onlyPlain || typeof elem === 'object') {\n      return elem;\n    }\n\n    // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain\n    if (elem && typeof elem.clone === 'function') {\n      return elem.clone();\n    }\n  });\n}\n/* eslint-enable consistent-return */\n\n/**\n * Receives a tree-like object and returns a plain object which depth is 1.\n *\n * - Input:\n *\n *  {\n *    name: 'John',\n *    address: {\n *      street: 'Fake St. 123',\n *      coordinates: {\n *        longitude: 55.6779627,\n *        latitude: 12.5964313\n *      }\n *    }\n *  }\n *\n * - Output:\n *\n *  {\n *    name: 'John',\n *    address.street: 'Fake St. 123',\n *    address.coordinates.latitude: 55.6779627,\n *    address.coordinates.longitude: 12.5964313\n *  }\n *\n * @param value an Object\n * @returns a flattened object\n * @private\n */\nexport function flattenObjectDeep<T extends object>(value: T): Flatten<T> {\n  if (!isPlainObject(value)) {\n    return value as Flatten<T>;\n  }\n\n  const flattenedObj: { [key: string]: any } = Object.create(null);\n\n  function flattenObject(obj: { [key: string]: any }, subPath?: string) {\n    for (const key of Object.keys(obj)) {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = getValue(obj, key);\n      }\n    }\n\n    return flattenedObj;\n  }\n\n  return flattenObject(value) as Flatten<T>;\n}\n\n// taken from\n// https://stackoverflow.com/questions/66614528/flatten-object-with-custom-keys-in-typescript\n// because this is typescript black magic\ntype Flatten<T extends object> = object extends T ? object : {\n  [K in keyof T]-?: (x: NonNullable<T[K]> extends infer V ? V extends object ?\n    V extends readonly any[] ? Pick<T, K> : Flatten<V> extends infer FV ? ({\n      [P in keyof FV as `${Extract<K, string | number>}.${Extract<P, string | number>}`]:\n      FV[P] }) : never : Pick<T, K> : never\n  ) => void } extends Record<keyof T, (y: infer O) => void> ?\n  O extends unknown ? { [K in keyof O]: O[K] } : never : never;\n\n/**\n * Assigns own and inherited enumerable string and symbol keyed properties of source\n * objects to the destination object.\n *\n * https://lodash.com/docs/4.17.4#defaults\n *\n * **Note:** This method mutates `object`.\n *\n * @param objectIn The destination object.\n * @param sources The source objects.\n * @returns Returns `object`.\n * @private\n */\nexport function defaults(\n  objectIn: { [key: string]: any }, // TODO [2022-09-01]: key should be string | symbol once we drop support for TS 4.4\n  ...sources: Array<{ [key: string]: any }> // TODO [2022-09-01]: key should be string | symbol once we drop support for TS 4.4\n): object {\n  for (const source of sources) {\n    if (!source) {\n      continue;\n    }\n\n    // TODO [2022-09-01]: note on 'as any[]': TypeScript < 4.4 does not support using Symbol for keys.\n    //  Cast can be removed in sept. 2022 when we drop support for < 4.4\n    for (const key of getComplexKeys(source) as any[]) {\n      const value = objectIn[key];\n      const objectPrototype: { [key: string]: any } = Object.prototype; // TODO [2022-09-01]: key should be string | symbol once we drop support for TS 4.4\n\n      if (\n        value === undefined\n        || isEqual(value, objectPrototype[key])\n        && !Object.prototype.hasOwnProperty.call(objectIn, key)\n      ) {\n        objectIn[key] = source[key];\n      }\n    }\n  }\n\n  return objectIn;\n}\n\n/**\n * @param obj\n * @returns A new object with camel-cased keys\n * @private\n */\nexport function camelizeObjectKeys(obj: { [key: string]: any }) {\n  const newObj: { [key: string]: any } = Object.create(null);\n\n  for (const key of Object.keys(obj)) {\n    newObj[camelize(key)] = obj[key];\n  }\n\n  return newObj;\n}\n"],
  "mappings": "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",
  "names": []
}
