{
  "version": 3,
  "sources": ["../src/sql-string.js"],
  "sourcesContent": ["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nexport function arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n\n    return sql;\n  }, '');\n}\n\nexport function escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    // There are cases in Db2 for i where 'NULL' isn't accepted, such as\n    // comparison with a WHERE() statement. In those cases, we have to cast.\n    if (dialect === 'ibmi' && format) {\n      return 'cast(NULL as int)';\n    }\n\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (['sqlite', 'mssql', 'ibmi'].includes(dialect)) {\n        return Number(Boolean(val));\n      }\n\n      return (Boolean(val)).toString();\n    case 'number':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dialect === 'ibmi') {\n      return dataTypes[dialect].STRING.prototype.stringify(val);\n    }\n\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (['postgres', 'sqlite', 'mssql', 'snowflake', 'db2', 'ibmi'].includes(dialect)) {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, '\\'\\'');\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n\n    // eslint-disable-next-line no-control-regex -- \\u001A is intended to be in this regex\n    val = val.replace(/[\\b\\0\\t\\n\\r\\u001A\"'\\\\]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\u001A': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n\n  return `${(prependN ? 'N\\'' : '\\'') + val}'`;\n}\n\nexport function format(sql, values, timeZone, dialect) {\n  values = [values].flat();\n\n  if (typeof sql !== 'string') {\n    throw new TypeError(`Invalid SQL string provided: ${sql}`);\n  }\n\n  // replace ? expect if it's part of ?& or ?|, as these are Postgres operators\n  // https://www.postgresql.org/docs/9.4/functions-json.html\n  return sql.replace(/\\?(?![&|])/g, match => {\n    if (values.length === 0) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\n\nexport function formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if (dialect === 'postgres' && value.slice(0, 2) === '::') {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
