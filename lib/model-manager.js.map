{
  "version": 3,
  "sources": ["../src/model-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nexport class ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name',\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} [options] iterator options\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true,\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,WAAW,QAAQ,gBAAgB;AACzC,MAAM,IAAI,QAAQ,QAAQ;AAEnB,MAAM,aAAa;AAAA,EACxB,YAAY,WAAW;AACrB,SAAK,SAAS,CAAC;AACf,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,SAAS,OAAO;AACd,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,UAAU,OAAO,MAAM,QAAQ;AAEpC,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,eAAe;AACzB,SAAK,SAAS,KAAK,OAAO,OAAO,WAAS,MAAM,SAAS,cAAc,IAAI;AAE3E,WAAO,KAAK,UAAU,OAAO,cAAc;AAAA,EAC7C;AAAA,EAEA,SAAS,SAAS,SAAS;AACzB,cAAU,EAAE,SAAS,WAAW,CAAC,GAAG;AAAA,MAClC,WAAW;AAAA,IACb,CAAC;AAED,WAAO,KAAK,OAAO,KAAK,WAAS,MAAM,QAAQ,eAAe,OAAO;AAAA,EACvE;AAAA,MAEI,MAAM;AACR,WAAO,KAAK;AAAA,EACd;AAAA,EAUA,aAAa,UAAU,SAAS;AAC9B,UAAM,SAAS,CAAC;AAChB,UAAM,SAAS,IAAI,SAAS;AAC5B,QAAI;AACJ,QAAI;AAEJ,cAAU,EAAE,SAAS,WAAW,CAAC,GAAG;AAAA,MAClC,SAAS;AAAA,IACX,CAAC;AAED,eAAW,SAAS,KAAK,QAAQ;AAC/B,UAAI,OAAO,CAAC;AACZ,UAAI,YAAY,MAAM,aAAa;AAEnC,UAAI,EAAE,SAAS,SAAS,GAAG;AACzB,oBAAY,GAAG,UAAU,UAAU,UAAU;AAAA,MAC/C;AAEA,aAAO,aAAa;AAEpB,iBAAW,YAAY,MAAM,eAAe;AAC1C,YAAI,OAAO,UAAU,eAAe,KAAK,MAAM,eAAe,QAAQ,GAAG;AACvE,gBAAM,YAAY,MAAM,cAAc;AAEtC,cAAI,UAAU,YAAY;AACxB,kBAAM,UAAU,WAAW;AAE3B,gBAAI,EAAE,SAAS,GAAG,GAAG;AACnB,oBAAM,GAAG,IAAI,UAAU,IAAI;AAAA,YAC7B;AAEA,iBAAK,KAAK,GAAG;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAEA,aAAO,KAAK,OAAO,UAAO,cAAc,IAAG;AAE3C,aAAO,IAAI,WAAW,IAAI;AAAA,IAC5B;AAEA,aAAS,OAAO,KAAK;AACrB,QAAI,QAAQ,SAAS;AACnB,eAAS,OAAO,QAAQ;AAAA,IAC1B;AAEA,eAAW,QAAQ,QAAQ;AACzB,eAAS,OAAO,OAAO,IAAI;AAAA,IAC7B;AAAA,EACF;AACF;",
  "names": []
}
