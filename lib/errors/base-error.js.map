{
  "version": 3,
  "sources": ["../../src/errors/base-error.ts"],
  "sourcesContent": ["import { useErrorCause } from '../utils/deprecations.js';\n\nexport interface SequelizeErrorOptions {\n  stack?: string;\n}\n\nexport interface CommonErrorProperties {\n  /** The SQL that triggered the error */\n  readonly sql: string;\n}\n\n// TODO [>=2023-04-30]:\n//  Remove me in Sequelize 8, where this is added natively by TypeScript (>= 4.6):\n//  This is a breaking change and must be done in a MAJOR release.\nexport type ErrorOptions = {\n  cause?: Error,\n};\n\nconst supportsErrorCause = (() => {\n  // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- Supported in TS 4.6, not before\n  // @ts-ignore\n  const err = new Error('Dummy 1', { cause: new Error('Dummy 2') });\n\n  return 'cause' in err;\n})();\n\n/**\n * The Base Error all Sequelize Errors inherit from.\n *\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\n * All sequelize errors inherit from the base JS error object.\n *\n * This means that errors can be accessed using `Sequelize.ValidationError`\n */\nabstract class BaseError extends Error {\n  declare cause: Error | undefined;\n\n  get parent(): this['cause'] {\n    useErrorCause();\n\n    return this.cause;\n  }\n\n  get original(): this['cause'] {\n    useErrorCause();\n\n    return this.cause;\n  }\n\n  constructor(message?: string, options?: ErrorOptions) {\n    // TODO [>=2023-04-30]: remove this ts-ignore (Sequelize 8)\n    // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- Supported in TS 4.6, not before\n    // @ts-ignore\n    super(message, options);\n    this.name = 'SequelizeBaseError';\n\n    if (!supportsErrorCause) {\n      // TODO [>=2023-04-30]:\n      //  Once all supported node versions have support for Error.cause (added in Node 16.9.0), delete this line:\n      //  This is a breaking change and must be done in a MAJOR release.\n      this.cause = options?.cause;\n    }\n  }\n}\n\nexport default BaseError;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA8B;AAkB9B,MAAM,qBAAsB,OAAM;AAGhC,QAAM,MAAM,IAAI,MAAM,WAAW,EAAE,OAAO,IAAI,MAAM,SAAS,EAAE,CAAC;AAEhE,SAAO,WAAW;AACpB,GAAG;AAUH,MAAe,kBAAkB,MAAM;AAAA,MAGjC,SAAwB;AAC1B,2CAAc;AAEd,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,WAA0B;AAC5B,2CAAc;AAEd,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,SAAkB,SAAwB;AAIpD,UAAM,SAAS,OAAO;AACtB,SAAK,OAAO;AAEZ,QAAI,CAAC,oBAAoB;AAIvB,WAAK,QAAQ,mCAAS;AAAA,IACxB;AAAA,EACF;AACF;AAEA,IAAO,qBAAQ;",
  "names": []
}
